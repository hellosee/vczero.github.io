#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('danmaku:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
var voteData = [
        {
            "title":"晚饭选择",
            "choose":[
                {key:"农家乐",value:10},
                {key:"酒店晚饭",value:20},
                {key:"自行解决",value:5}
            ]
        },
        {
            "title":"一起去唱歌",
            "choose":[
                {key:"参加",value:10},
                {key:"考虑",value:3},
                {key:"不参加",value:6}
            ]
        }
    ]

// Create socket.io
var io = require('socket.io')(server);
// Wait for socket event
io.on('connection', function(socket){
    console.log('a user connected');
    socket.on('disconnect', function(){
        console.log('user disconnected');
    });
    socket.on('danmaku send', function(msg){
        console.log('message: ' + msg);
        io.emit('danmaku show', msg);
    });
    socket.on('vote send', function(msg){
        console.log('message: ' + msg);
        voteData.push(JSON.parse(msg))
        io.emit('vote show', msg);
    });

    io.emit('vote showAll', JSON.stringify(voteData));

});
